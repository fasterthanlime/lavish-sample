
// A key/value pair used to remember session information.
//
// Can be harmful in real life, but this is just a sample schema
struct Cookie {
    // The key of the cookie
    key: string,
    // The value of the cookie.
    // Although it's typed as a string, it can be anything underneath.
    value: string,
    // just adding something
    comment: option<string>,
}

struct Emoji {
    shortcode: string,
    image_url: string,
}

struct Container {
    left: Containee,
    right: Containee,
}

struct Containee {
    name: string,
    scores: array<i64>,
}

struct AllIntegers {
    field_i8: i8,
    field_i16: i16,
    field_i32: i32,
    field_i64: i64,
    field_u8: u8,
    field_u16: u16,
    field_u32: u32,
    field_u64: u64,
}

struct Bools {
    field_bool: bool,
}

struct AllComplex {
    field_array: array<i64>,
    field_option: option<i64>,
    field_map: map<i64, i64>,
}

namespace cookies {
    server fn get() -> (cookies: array<Cookie>)
}

// Ask for a list of cookies from the server.
server fn get_cookies() -> (cookies: array<Cookie>)

// Reverse a string
server fn reverse(s: string) -> (s: string)

// Ask the client what its user-agent is.
client fn get_user_agent() -> (user_agent: string)

// Ping the server to make sure it's alive
server fn ping() {
    // Ping the client to make sure it's alive
    client fn ping()
}

namespace universe {
    namespace earth {
        namespace country {
            namespace city {
                server fn new_york()
            }
        }
    }
}

namespace session {
    server fn login(username: string, password: string) {
        client fn solve_totp() -> (result: string)
    }
}

